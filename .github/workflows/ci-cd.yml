name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: mosala_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: mosala_test
          MYSQL_USER: mosala
          MYSQL_PASSWORD: mosala
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: |
        npm ci
        cd frontend && npm ci
        cd ../backend && npm ci

    - name: Run linting
      run: |
        npm run lint
        cd frontend && npm run lint
        cd ../backend && npm run lint

    - name: Run tests
      run: |
        cd backend && npm run test
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASS: postgres
        DB_NAME: mosala_test

    - name: Build frontend
      run: |
        cd frontend && npm run build

    - name: Build backend
      run: |
        cd backend && npm run build

  docker-build:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker images
      run: |
        # Build des images
        docker build -t ${{ secrets.DOCKER_USERNAME }}/mosala-frontend:${{ github.sha }} .
        docker build -t ${{ secrets.DOCKER_USERNAME }}/mosala-backend:${{ github.sha }} ./backend
        docker build -t ${{ secrets.DOCKER_USERNAME }}/mosala-api:${{ github.sha }} ./mosala-api
        
        # Push des images avec SHA
        docker push ${{ secrets.DOCKER_USERNAME }}/mosala-frontend:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/mosala-backend:${{ github.sha }}
        docker push ${{ secrets.DOCKER_USERNAME }}/mosala-api:${{ github.sha }}
        
        # Tag et push latest
        docker tag ${{ secrets.DOCKER_USERNAME }}/mosala-frontend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/mosala-frontend:latest
        docker tag ${{ secrets.DOCKER_USERNAME }}/mosala-backend:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/mosala-backend:latest
        docker tag ${{ secrets.DOCKER_USERNAME }}/mosala-api:${{ github.sha }} ${{ secrets.DOCKER_USERNAME }}/mosala-api:latest
        
        docker push ${{ secrets.DOCKER_USERNAME }}/mosala-frontend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/mosala-backend:latest
        docker push ${{ secrets.DOCKER_USERNAME }}/mosala-api:latest

  deploy-staging:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Ajoutez ici vos commandes de d√©ploiement staging

  deploy-production:
    needs: docker-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Deploy to production server
      run: |
        echo "Deploying to production server..."
        
        # Ajouter la cl√© SSH au known_hosts
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
        
        # Se connecter au serveur et d√©ployer
        ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          echo "üîÑ Mise √† jour du code..."
          cd /opt/mosala
          git pull origin main
          
          echo "üê≥ Pull des derni√®res images Docker..."
          docker-compose pull
          
          echo "üöÄ Red√©marrage des services..."
          docker-compose down
          docker-compose up -d
          
          echo "üßπ Nettoyage des images non utilis√©es..."
          docker image prune -f
          
          echo "‚úÖ D√©ploiement termin√©!"
          docker-compose ps
        EOF

    - name: Health check
      run: |
        echo "üîç V√©rification de la sant√© des services..."
        # Attendre que les services soient pr√™ts
        sleep 30
        
        # V√©rifier que les services r√©pondent
        curl -f http://${{ secrets.SERVER_HOST }}:1199 || exit 1
        curl -f http://${{ secrets.SERVER_HOST }}:4002/api || exit 1
