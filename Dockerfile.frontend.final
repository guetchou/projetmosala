# Build stage
FROM node:20-alpine AS deps

# Install pnpm globally
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Copy workspace files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Build stage
FROM node:20-alpine AS builder

# Install pnpm globally
RUN npm install -g pnpm

WORKDIR /app

# Copy dependencies from deps stage
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package.json ./package.json
COPY --from=deps /app/pnpm-lock.yaml ./pnpm-lock.yaml
COPY --from=deps /app/pnpm-workspace.yaml ./pnpm-workspace.yaml

# Copy frontend source
COPY frontend/ ./frontend/

# Install frontend dependencies specifically
WORKDIR /app/frontend
RUN pnpm install --frozen-lockfile

# Build the application
RUN pnpm run build

# Production stage
FROM nginx:alpine AS runner

# ðŸš€ CORRECTION : Copier d'abord les assets statiques du dossier public
# Copier le dossier public complet pour inclure les images
COPY frontend/public/ /usr/share/nginx/html/

# Copy built application (aprÃ¨s pour ne pas Ã©craser les assets)
COPY --from=builder /app/frontend/dist /usr/share/nginx/html

# Copy nginx configuration
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Expose port
EXPOSE 80

# Start nginx
CMD ["nginx", "-g", "daemon off;"]
