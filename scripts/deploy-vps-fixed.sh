#!/bin/bash

# üöÄ Script de d√©ploiement VPS corrig√© pour les assets statiques
# R√©sout le probl√®me 404 des images en production

set -e

# Configuration
VPS_HOST="topcenter-ovh"
PROJECT_PATH="/opt/mosala"
DOCKER_IMAGE="galoycg/mosala-frontend:latest"

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

# V√©rifier que nous sommes dans le bon r√©pertoire
if [ ! -f "docker-compose.yml" ]; then
    log_error "Ce script doit √™tre ex√©cut√© depuis la racine du projet"
    exit 1
fi

log_info "üöÄ D√©ploiement VPS avec correction des assets statiques..."

# 1. Build de l'image Docker avec les assets
log_info "üì¶ Build de l'image Docker..."
docker build -f Dockerfile.frontend.final -t $DOCKER_IMAGE .

# 2. Push vers Docker Hub
log_info "üì§ Push vers Docker Hub..."
docker push $DOCKER_IMAGE

# 3. D√©ploiement sur le VPS
log_info "üåê D√©ploiement sur le VPS..."

ssh $VPS_HOST << 'EOF'
    cd /opt/mosala
    
    echo "üîÑ Arr√™t des services existants..."
    docker compose down 2>/dev/null || true
    
    echo "üì• Pull de la nouvelle image..."
    docker pull galoycg/mosala-frontend:latest
    
    echo "üöÄ D√©marrage des services..."
    docker compose up -d
    
    echo "‚è≥ Attente du d√©marrage..."
    sleep 30
    
    echo "üìä V√©rification des services..."
    docker compose ps
    
    echo "üîç V√©rification des assets statiques..."
    docker exec mosala-frontend ls -la /usr/share/nginx/html/topcenter-uploads/carrousel/ || echo "‚ùå Dossier carrousel non trouv√©"
    
    echo "üåê Test de l'application..."
    curl -s -o /dev/null -w "%{http_code}" http://localhost:1200 || echo "‚ùå Application non accessible"
EOF

log_success "üéâ D√©ploiement termin√© !"

# 4. V√©rification finale
log_info "üîç V√©rification finale..."

# Test de l'application
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://$VPS_HOST:1200 || echo "000")

if [ "$HTTP_CODE" = "200" ]; then
    log_success "‚úÖ Application accessible (HTTP $HTTP_CODE)"
else
    log_error "‚ùå Application non accessible (HTTP $HTTP_CODE)"
fi

# Test d'une image sp√©cifique
IMAGE_TEST=$(curl -s -o /dev/null -w "%{http_code}" http://$VPS_HOST:1200/topcenter-uploads/carrousel/mosala1.jpeg || echo "000")

if [ "$IMAGE_TEST" = "200" ]; then
    log_success "‚úÖ Images carousel accessibles"
else
    log_warning "‚ö†Ô∏è  Images carousel non accessibles (HTTP $IMAGE_TEST)"
    log_info "üí° V√©rifiez que les assets sont bien copi√©s dans le container"
fi

echo ""
log_info "üåê URLs d'acc√®s :"
echo "  Frontend: http://$VPS_HOST:1200"
echo "  Backend: http://$VPS_HOST:1188"
echo "  Strapi: http://$VPS_HOST:1337"

echo ""
log_info "üìã Commandes utiles :"
echo "  Logs: ssh $VPS_HOST 'cd $PROJECT_PATH && docker compose logs -f frontend'"
echo "  Shell: ssh $VPS_HOST 'cd $PROJECT_PATH && docker exec -it mosala-frontend sh'"
echo "  Assets: ssh $VPS_HOST 'cd $PROJECT_PATH && docker exec mosala-frontend ls -la /usr/share/nginx/html/topcenter-uploads/'"
